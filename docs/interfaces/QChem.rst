QChem
=======
PyOpenCAP supports an experimental interface with the Q-Chem quantum chemistry package. 
This page is currently under construction. 

Checkpoint files
-----------------
OpenCAP is capable of parsing formatted .fchk files which contain all of the necessary 
state and transition density matrices in a particular order. The state 1RDMs should be listed first, 
followed by the transition DMs. The transition DMs should be listed starting from lowest root, listing all 
transitions from that root before moving onto the next highest root.

For an example of the format OpenCAP understands, consider an open-shell system with 3 target states. The matrices should 
be listed in the following order:

#. Alpha State Density 1
#. Beta State Density 1
#. Alpha State Density 2
#. Beta State Density 2
#. Alpha State Density 3
#. Beta State Density 3
#. Alpha Transition DM 1-->2
#. Beta Transition DM 1-->2
#. Alpha Transition DM 1-->3
#. Beta Transition DM 1-->3
#. Alpha Transition DM 2-->3
#. Beta Transition DM 2-->3

Transition densities can be exported to file by setting STATE_ANALYSIS to True in the $rem card. 

For CIS/TDDFT/SF-DTDDFT family of methods, WFA_REF_STATE controls the reference state 
for the transition density matrix calculations, and in principle the calculation can be repeated 
with different values of WFA_REF_STATE to obtain all of the necessary TDMs, which can then be combined 
into one file. 

Transition densities between all EOM target states can be calculated by setting CC_TRANS_PROP = 2.
Unfortunately, the state 1RDMs are exported in lower triangular form, and EOM-CC densities are not 
necessarily symmetric. In many cases this has little effect on the trajectories, but one should 
exercise caution when analyzing results obtained in this fashion.

However, Projected CAP-EOM-CC is implemented in Q-Chem as of version 5.3. These calculations 
are initiated by setting PROJ_CAP = 3 in $complex_ccman, and the CAP matrix in state basis is 
printed in the output. As such, the :class:`~pyopencap.analysis.CAPHamiltonian` class directly 
supports analysis of Q-Chem output files generated in this fashion.

Importing data
---------------

**System object**

The geometry and basis set can be imported into a :class:`~pyopencap.System` 
object using .fchk files.

.. code-block:: python

	import pyopencap
	sys_dict = {"molecule": "qchem_fchk","basis_file": "path/to/qc.fchk"}
	my_system = pyopencap.System(sys_dict)

**CAP object**

Densities can be read in from .fchk files, and the zeroth order Hamiltonian can be read from 
Q-Chem output files for EOM-CC calculations. When constructing the :class:`~pyopencap.CAP` object, 
the string "qchem" should be used to denote the ordering of the atomic orbital basis functions.

.. code-block:: python

    cap_dict = {"cap_type": "box",
            	"cap_x":"2.76",
            	"cap_y":"2.76",
            	"cap_z":"4.88",
            	"Radial_precision": "14",
            	"angular_points": "110"}
    pc = pyopencap.CAP(my_system,cap_dict,10,"qchem")
    # read in densities
	es_dict = {"method" : "eomea",
           "qchem_output":"path/to/output.out",
           "qchem_fchk":"path/to/qc.fchk"}
    pc.read_data(es_dict)
    # save the zeroth order Hamiltonian for later use
    h0 = pc.get_H()
    
Analysis
--------
The :func:`~pyopencap.analysis.CAPHamiltonian` can be instantiated by specifying a path to 
an output file generated by a Projected CAP-EOM-CC calculation performed by Q-Chem.

.. code-block:: python
	
	from pyopencap.analysis.CAPTrajectory import CAPHamiltonian
	CAPH = CAPHamiltonian(output_file="qchem_projcap_3.out")
	
